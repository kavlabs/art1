/* === Art by Nasmeen â€“ global bundle (app.min.js) === */
(function(){
  const MIN_EQ_WIDTH = 768; // run equalize on tablet/desktop only

  function debounce(fn, ms=120){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), ms); }; }

  // A) Equalize figure heights per visible row (on larger screens)
  function equalizeFigures(){
    const wide = window.innerWidth >= MIN_EQ_WIDTH;
    const figures = document.querySelectorAll('.exp-item figure');
    if (!figures.length) return;

    if (!wide){
      figures.forEach(f => f.style.height = ''); // reset on mobile
      return;
    }

    // Equalize per .category-row block
    document.querySelectorAll('.category-row').forEach(cat => {
      // collect figures inside this category
      const figs = Array.from(cat.querySelectorAll('.exp-item figure'));
      if (!figs.length) return;
      // reset heights to measure natural
      figs.forEach(f => f.style.height='');
      // measure max
      let maxH = 0;
      figs.forEach(f => { maxH = Math.max(maxH, f.getBoundingClientRect().height); });
      // set
      figs.forEach(f => f.style.height = Math.ceil(maxH) + 'px');
    });
  }

  // B) Auto-tag figures/headings with art IDs (handles nested rows)
  function autoTagArtIds(){
    // From text: read AP-xxx then apply to figures + heading in the same outer row
    document.querySelectorAll('.program_cont').forEach(cont => {
      const lastP = cont.querySelector('.wcs-class__excerpt p:last-of-type');
      const text = lastP ? lastP.textContent : '';
      const m = text && text.match(/\bAP-\d{3}\b/i);
      const id = m ? m[0].toUpperCase() : null;
      if (!id) return;

      // Find the outer row that contains this program_cont
      const outerRow = cont.closest('.row');
      if (!outerRow) return;

      // Tag heading
      const h3 = cont.querySelector('h3');
      if (h3 && !h3.dataset.artId){
        h3.dataset.artId = id;
        h3.classList.add('clickable-title');
      }

      // Tag all figures in the same outer row (handles diptychs)
      outerRow.querySelectorAll('figure').forEach(fig => {
        if (!fig.dataset.artId) fig.dataset.artId = id;
        fig.style.cursor = 'pointer';
      });
    });

    // For any figure that already had data-art-id, ensure the matching heading is also tagged
    document.querySelectorAll('figure[data-art-id]').forEach(fig => {
      const id = fig.dataset.artId; if (!id) return;
      // climb to the outer row that contains the program_cont heading
      let outer = fig.closest('.row');
      while (outer && !outer.querySelector('.program_cont h3')) {
        const p = outer.parentElement && outer.parentElement.closest('.row');
        if (!p || p === outer) break;
        outer = p;
      }
      const h3 = outer && outer.querySelector('.program_cont h3');
      if (h3) {
        h3.dataset.artId = id;
        h3.classList.add('clickable-title');
      }
      fig.style.cursor = 'pointer';
    });
  }

  // C) Delegated click navigation for figures and headings
  function bindClicks(){
    document.addEventListener('click', function(e){
      const t = e.target.closest('figure[data-art-id], h3[data-art-id]');
      if (!t) return;
      const id = t.dataset.artId;
      if (id) location.href = 'art.html?id=' + encodeURIComponent(id);
    });
  }

  // Init on DOM ready + adjust on load/resize
  document.addEventListener('DOMContentLoaded', function(){
    try { autoTagArtIds(); } catch(e){ console.warn('autoTagArtIds:', e); }
    try { equalizeFigures(); } catch(e){ console.warn('equalizeFigures:', e); }
    bindClicks();
  });

  window.addEventListener('load', equalizeFigures);
  window.addEventListener('resize', debounce(equalizeFigures, 150));
})();